/* JavaCCParserTokenManager.java */
/* Generated By:JavaCC: Do not edit this line. JavaCCParserTokenManager.java */
package jminusminus;
import java.util.ArrayList;

/** Token Manager. */
@SuppressWarnings ("unused")
public class JavaCCParserTokenManager implements JavaCCParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x1800000L) != 0L)
         {
            jjmatchedKind = 98;
            return 3;
         }
         if ((active0 & 0xffffffe7ff000L) != 0L)
         {
            jjmatchedKind = 98;
            return 1;
         }
         if ((active0 & 0x20000000000000L) != 0L)
            return 7;
         return -1;
      case 1:
         if ((active0 & 0x10600000L) != 0L)
            return 1;
         if ((active0 & 0xfffffef9ff000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 1;
            }
            return 1;
         }
         return -1;
      case 2:
         if ((active0 & 0x1000b08000000L) != 0L)
            return 1;
         if ((active0 & 0xefff4e7dff000L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 2;
            }
            return 1;
         }
         return -1;
      case 3:
         if ((active0 & 0x8dfe2e75e7000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 3;
            return 1;
         }
         if ((active0 & 0x6201400818000L) != 0L)
            return 1;
         return -1;
      case 4:
         if ((active0 & 0x17e2e5583000L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 98;
               jjmatchedPos = 4;
            }
            return 1;
         }
         if ((active0 & 0x8c80002064000L) != 0L)
            return 1;
         return -1;
      case 5:
         if ((active0 & 0xe2a5183000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 5;
            return 1;
         }
         if ((active0 & 0x970040400000L) != 0L)
            return 1;
         return -1;
      case 6:
         if ((active0 & 0x82a0081000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 6;
            return 1;
         }
         if ((active0 & 0x6005102000L) != 0L)
            return 1;
         return -1;
      case 7:
         if ((active0 & 0x82a0000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 7;
            return 1;
         }
         if ((active0 & 0x81000L) != 0L)
            return 1;
         return -1;
      case 8:
         if ((active0 & 0xa0000000L) != 0L)
         {
            jjmatchedKind = 98;
            jjmatchedPos = 8;
            return 1;
         }
         if ((active0 & 0x8200000000L) != 0L)
            return 1;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 33:
         jjmatchedKind = 78;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400000L);
      case 37:
         jjmatchedKind = 92;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x20000000L);
      case 38:
         jjmatchedKind = 63;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1001L);
      case 40:
         return jjStopAtPos(0, 56);
      case 41:
         return jjStopAtPos(0, 57);
      case 42:
         jjmatchedKind = 94;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x80000000L);
      case 43:
         jjmatchedKind = 89;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x4000800L);
      case 44:
         return jjStopAtPos(0, 52);
      case 45:
         jjmatchedKind = 83;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100020L);
      case 46:
         return jjStartNfaWithStates_0(0, 53, 7);
      case 47:
         jjmatchedKind = 70;
         return jjMoveStringLiteralDfa1_0(0x240L, 0x80L);
      case 58:
         return jjStopAtPos(0, 68);
      case 59:
         return jjStopAtPos(0, 60);
      case 60:
         jjmatchedKind = 82;
         return jjMoveStringLiteralDfa1_0(0x6000000000000000L, 0x2000L);
      case 61:
         jjmatchedKind = 67;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 62:
         jjmatchedKind = 74;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x30206L);
      case 63:
         return jjStopAtPos(0, 91);
      case 91:
         return jjStopAtPos(0, 54);
      case 93:
         return jjStopAtPos(0, 58);
      case 94:
         jjmatchedKind = 96;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x200000000L);
      case 97:
         return jjMoveStringLiteralDfa1_0(0x1000L, 0x0L);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x6000L, 0x0L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0xf8000L, 0x0L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x700000L, 0x0L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x1800000L, 0x0L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xe000000L, 0x0L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x3f0000000L, 0x0L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x400000000L, 0x0L);
      case 110:
         return jjMoveStringLiteralDfa1_0(0x1800000000L, 0x0L);
      case 112:
         return jjMoveStringLiteralDfa1_0(0x1e000000000L, 0x0L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 115:
         return jjMoveStringLiteralDfa1_0(0x1c0000000000L, 0x0L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x3e00000000000L, 0x0L);
      case 118:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 123:
         return jjStopAtPos(0, 55);
      case 124:
         jjmatchedKind = 87;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1008000L);
      case 125:
         return jjStopAtPos(0, 59);
      case 126:
         return jjStopAtPos(0, 85);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 38:
         if ((active1 & 0x1000L) != 0L)
            return jjStopAtPos(1, 76);
         break;
      case 42:
         if ((active0 & 0x200L) != 0L)
            return jjStopAtPos(1, 9);
         break;
      case 43:
         if ((active1 & 0x800L) != 0L)
            return jjStopAtPos(1, 75);
         break;
      case 45:
         if ((active1 & 0x20L) != 0L)
            return jjStopAtPos(1, 69);
         break;
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      case 60:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000000000L, active1, 0L);
      case 61:
         if ((active1 & 0x1L) != 0L)
            return jjStopAtPos(1, 64);
         else if ((active1 & 0x80L) != 0L)
            return jjStopAtPos(1, 71);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x200L) != 0L)
            return jjStopAtPos(1, 73);
         else if ((active1 & 0x2000L) != 0L)
            return jjStopAtPos(1, 77);
         else if ((active1 & 0x100000L) != 0L)
            return jjStopAtPos(1, 84);
         else if ((active1 & 0x400000L) != 0L)
            return jjStopAtPos(1, 86);
         else if ((active1 & 0x1000000L) != 0L)
            return jjStopAtPos(1, 88);
         else if ((active1 & 0x4000000L) != 0L)
            return jjStopAtPos(1, 90);
         else if ((active1 & 0x20000000L) != 0L)
            return jjStopAtPos(1, 93);
         else if ((active1 & 0x80000000L) != 0L)
            return jjStopAtPos(1, 95);
         else if ((active1 & 0x200000000L) != 0L)
            return jjStopAtPos(1, 97);
         break;
      case 62:
         if ((active1 & 0x2L) != 0L)
         {
            jjmatchedKind = 65;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0L, active1, 0x30004L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x2002030000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x20800100000L, active1, 0L);
      case 102:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(1, 28, 1);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x8e00000008000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x840000L, active1, 0L);
      case 109:
         return jjMoveStringLiteralDfa2_0(active0, 0x60000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa2_0(active0, 0x380000000L, active1, 0L);
      case 111:
         if ((active0 & 0x200000L) != 0L)
         {
            jjmatchedKind = 21;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000408482000L, active1, 0L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x300c000004000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x40000000000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x91000000000L, active1, 0L);
      case 119:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000000000L, active1, 0L);
      case 120:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000L, active1, 0L);
      case 124:
         if ((active1 & 0x8000L) != 0L)
            return jjStopAtPos(1, 79);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 61:
         if ((active0 & 0x4000000000000000L) != 0L)
            return jjStopAtPos(2, 62);
         else if ((active1 & 0x4L) != 0L)
            return jjStopAtPos(2, 66);
         break;
      case 62:
         if ((active1 & 0x10000L) != 0L)
         {
            jjmatchedKind = 80;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0L, active1, 0x20000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x40000048000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L, active1, 0L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000L, active1, 0L);
      case 102:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0xc304000000000L, active1, 0L);
      case 108:
         return jjMoveStringLiteralDfa3_0(active0, 0x1002000000L, active1, 0L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x404080000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000002000L, active1, 0L);
      case 112:
         return jjMoveStringLiteralDfa3_0(active0, 0x80060000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 1);
         return jjMoveStringLiteralDfa3_0(active0, 0xc00000000000L, active1, 0L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x80811000L, active1, 0L);
      case 116:
         if ((active0 & 0x100000000L) != 0L)
         {
            jjmatchedKind = 32;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x20201020000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000400000L, active1, 0L);
      case 119:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(2, 35, 1);
         break;
      case 121:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 48, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x20000L) != 0L)
            return jjStopAtPos(3, 81);
         break;
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x4104000L, active1, 0L);
      case 98:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000L, active1, 0L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000L, active1, 0L);
      case 100:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 50, 1);
         break;
      case 101:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(3, 16, 1);
         else if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(3, 23, 1);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 49, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x80201000000L, active1, 0L);
      case 103:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 1);
         break;
      case 107:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L, active1, 0L);
      case 108:
         if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x8010020002000L, active1, 0L);
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0xc00040000000L, active1, 0L);
      case 114:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(3, 15, 1);
         break;
      case 115:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 45, 1);
         return jjMoveStringLiteralDfa4_0(active0, 0x2040000L, active1, 0L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x148080081000L, active1, 0L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000L, active1, 0L);
      case 118:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1){
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, 0L);
      return 4;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x6080000000L);
      case 99:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 101:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(4, 25, 1);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x8020002000L);
      case 104:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(4, 17, 1);
         break;
      case 105:
         return jjMoveStringLiteralDfa5_0(active0, 0x50000080000L);
      case 107:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(4, 14, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa5_0(active0, 0x4400000L);
      case 110:
         return jjMoveStringLiteralDfa5_0(active0, 0x1000000L);
      case 114:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 43, 1);
         return jjMoveStringLiteralDfa5_0(active0, 0x20240001000L);
      case 115:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(4, 18, 1);
         break;
      case 117:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000L);
      case 119:
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 46;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x800000000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0, 0L);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, 0L);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x3000L);
      case 99:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 40, 1);
         else if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 42, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x8000000000L);
      case 100:
         return jjMoveStringLiteralDfa6_0(active0, 0x1000000L);
      case 101:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(5, 22, 1);
         break;
      case 102:
         return jjMoveStringLiteralDfa6_0(active0, 0x200000000L);
      case 103:
         return jjMoveStringLiteralDfa6_0(active0, 0x2000000000L);
      case 104:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 1);
         break;
      case 108:
         return jjMoveStringLiteralDfa6_0(active0, 0x4100000L);
      case 109:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 41, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x80080000L);
      case 115:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 47, 1);
         break;
      case 116:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(5, 30, 1);
         return jjMoveStringLiteralDfa6_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, 0L);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, 0L);
      return 6;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa7_0(active0, 0x200000000L);
      case 99:
         return jjMoveStringLiteralDfa7_0(active0, 0x80001000L);
      case 101:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 1);
         else if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 38, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(6, 13, 1);
         break;
      case 115:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(6, 24, 1);
         break;
      case 116:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(6, 20, 1);
         return jjMoveStringLiteralDfa7_0(active0, 0x8000000000L);
      case 117:
         return jjMoveStringLiteralDfa7_0(active0, 0x80000L);
      case 121:
         if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(6, 26, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0, 0L);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, 0L);
      return 7;
   }
   switch(curChar)
   {
      case 99:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000000L);
      case 101:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(7, 19, 1);
         return jjMoveStringLiteralDfa8_0(active0, 0x8080000000L);
      case 110:
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000L);
      case 116:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(7, 12, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0, 0L);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(6, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, 0L);
      return 8;
   }
   switch(curChar)
   {
      case 100:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 39, 1);
         break;
      case 101:
         if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(8, 33, 1);
         break;
      case 111:
         return jjMoveStringLiteralDfa9_0(active0, 0x80000000L);
      case 116:
         return jjMoveStringLiteralDfa9_0(active0, 0x20000000L);
      default :
         break;
   }
   return jjStartNfa_0(7, active0, 0L);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(7, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, 0L);
      return 9;
   }
   switch(curChar)
   {
      case 102:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(9, 31, 1);
         break;
      case 115:
         if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(9, 29, 1);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 40;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
                  if ((0x3ff001000000000L & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(1); }
                  }
                  else if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(4); }
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 103)
                        kind = 103;
                     { jjCheckNAdd(4); }
                  }
                  break;
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 101)
                        kind = 101;
                     { jjCheckNAddStates(0, 9); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAddStates(10, 12); }
                  else if (curChar == 39)
                     { jjAddStates(13, 14); }
                  else if (curChar == 46)
                     { jjCheckNAdd(7); }
                  else if (curChar == 36)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(1); }
                  }
                  break;
               case 1:
                  if ((0x3ff001000000000L & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(1); }
                  break;
               case 4:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 103)
                     kind = 103;
                  { jjCheckNAdd(4); }
                  break;
               case 6:
                  if (curChar == 46)
                     { jjCheckNAdd(7); }
                  break;
               case 7:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddStates(15, 17); }
                  break;
               case 9:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(10); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddTwoStates(10, 11); }
                  break;
               case 12:
                  if (curChar == 39)
                     { jjAddStates(13, 14); }
                  break;
               case 14:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 15:
                  if (curChar == 39 && kind > 106)
                     kind = 106;
                  break;
               case 16:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 17:
                  if (curChar == 34)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 19:
                  if ((0x8400000000L & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 20:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 21:
                  if (curChar == 34 && kind > 107)
                     kind = 107;
                  break;
               case 22:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAddStates(0, 9); }
                  break;
               case 23:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 101)
                     kind = 101;
                  { jjCheckNAdd(23); }
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(24, 25); }
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(26, 27); }
                  break;
               case 27:
                  if (curChar != 46)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 28:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddStates(18, 20); }
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(31); }
                  break;
               case 31:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddTwoStates(31, 11); }
                  break;
               case 32:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(32, 33); }
                  break;
               case 34:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(35); }
                  break;
               case 35:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 105)
                     kind = 105;
                  { jjCheckNAddTwoStates(35, 11); }
                  break;
               case 36:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddStates(21, 23); }
                  break;
               case 38:
                  if ((0x280000000000L & l) != 0L)
                     { jjCheckNAdd(39); }
                  break;
               case 39:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(39, 11); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 3:
               case 1:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 98)
                     kind = 98;
                  { jjCheckNAdd(1); }
                  break;
               case 0:
                  if ((0x7fffffe87fffffeL & l) != 0L)
                  {
                     if (kind > 98)
                        kind = 98;
                     { jjCheckNAdd(1); }
                  }
                  if ((0x1000000010L & l) != 0L)
                  {
                     if (kind > 104)
                        kind = 104;
                  }
                  else if ((0x2000000020L & l) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 2:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(24, 25); }
                  break;
               case 5:
                  if ((0x1000000010L & l) != 0L && kind > 104)
                     kind = 104;
                  break;
               case 8:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(26, 27); }
                  break;
               case 11:
                  if ((0x1000000010L & l) != 0L && kind > 105)
                     kind = 105;
                  break;
               case 13:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 14:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 16:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAdd(15); }
                  break;
               case 18:
                  if (curChar == 92)
                     jjstateSet[jjnewStateCnt++] = 19;
                  break;
               case 19:
                  if ((0x14404410000000L & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 20:
                  if ((0xffffffffefffffffL & l) != 0L)
                     { jjCheckNAddStates(10, 12); }
                  break;
               case 25:
                  if ((0x100000001000L & l) != 0L && kind > 102)
                     kind = 102;
                  break;
               case 29:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(28, 29); }
                  break;
               case 33:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(30, 31); }
                  break;
               case 37:
                  if ((0x2000000020L & l) != 0L)
                     { jjAddStates(32, 33); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 16:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 20:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     { jjAddStates(10, 12); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 40 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_2(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_2(0x400L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_2(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x400L) != 0L)
            return jjStopAtPos(1, 10);
         break;
      default :
         return 2;
   }
   return 2;
}
private int jjMoveStringLiteralDfa0_1()
{
   return jjMoveNfa_1(0, 0);
}
private int jjMoveNfa_1(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 3;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x2400L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                  }
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 1:
                  if (curChar == 10 && kind > 7)
                     kind = 7;
                  break;
               case 2:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 1;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 3 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, 
"\141\142\163\164\162\141\143\164", "\142\157\157\154\145\141\156", "\142\162\145\141\153", "\143\150\141\162", 
"\143\141\163\145", "\143\141\164\143\150", "\143\154\141\163\163", 
"\143\157\156\164\151\156\165\145", "\144\145\146\141\165\154\164", "\144\157", "\144\157\165\142\154\145", 
"\145\154\163\145", "\145\170\164\145\156\144\163", "\146\141\154\163\145", 
"\146\151\156\141\154\154\171", "\146\157\162", "\151\146", "\151\155\160\154\145\155\145\156\164\163", 
"\151\155\160\157\162\164", "\151\156\163\164\141\156\143\145\157\146", "\151\156\164", 
"\151\156\164\145\162\146\141\143\145", "\154\157\156\147", "\156\145\167", "\156\165\154\154", 
"\160\141\143\153\141\147\145", "\160\162\151\166\141\164\145", "\160\162\157\164\145\143\164\145\144", 
"\160\165\142\154\151\143", "\162\145\164\165\162\156", "\163\164\141\164\151\143", 
"\163\165\160\145\162", "\163\167\151\164\143\150", "\164\150\151\163", "\164\150\162\157\167", 
"\164\150\162\157\167\163", "\164\162\171", "\164\162\165\145", "\166\157\151\144", 
"\167\150\151\154\145", "\54", "\56", "\133", "\173", "\50", "\51", "\135", "\175", "\73", "\74\74", 
"\74\74\75", "\46", "\46\75", "\76\76", "\76\76\75", "\75", "\72", "\55\55", "\57", 
"\57\75", "\75\75", "\76\75", "\76", "\53\53", "\46\46", "\74\75", "\41", "\174\174", 
"\76\76\76", "\76\76\76\75", "\74", "\55", "\55\75", "\176", "\41\75", "\174", "\174\75", 
"\53", "\53\75", "\77", "\45", "\45\75", "\52", "\52\75", "\136", "\136\75", null, 
null, null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   t.image = curTokenImage;

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}
static final int[] jjnextStates = {
   23, 24, 25, 26, 27, 32, 33, 36, 37, 11, 18, 20, 21, 13, 16, 7, 
   8, 11, 28, 29, 11, 36, 37, 11, 3, 4, 9, 10, 30, 31, 34, 35, 
   38, 39, 
};

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(Exception e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       if (jjmatchedPos == 0 && jjmatchedKind > 109)
       {
          jjmatchedKind = 109;
       }
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 8)
       {
          jjmatchedKind = 8;
       }
       break;
     case 2:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_2();
       if (jjmatchedPos == 0 && jjmatchedKind > 11)
       {
          jjmatchedKind = 11;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

void SkipLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void MoreLexicalActions()
{
   jjimageLen += (lengthOfMatch = jjmatchedPos + 1);
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
void TokenLexicalActions(Token matchedToken)
{
   switch(jjmatchedKind)
   {
      default :
         break;
   }
}
private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public JavaCCParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public JavaCCParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  
  public void ReInit(SimpleCharStream stream)
  {


    jjmatchedPos =
    jjnewStateCnt =
    0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 40; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 3 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }


/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "IN_SINGLE_LINE_COMMENT",
   "IN_MULTI_LINE_COMMENT",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, -1, 1, 0, -1, 2, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xfffffffffffff001L, 0x2fe7ffffffffL, 
};
static final long[] jjtoSkip = {
   0xffeL, 0x0L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x0L, 
};
static final long[] jjtoMore = {
   0x0L, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[40];
    private final int[] jjstateSet = new int[2 * 40];
    private final StringBuilder jjimage = new StringBuilder();
    private StringBuilder image = jjimage;
    private int jjimageLen;
    private int lengthOfMatch;
    protected int curChar;
}
