1. Enter the number of hours it took you to complete the project between
   the <<< and >>> signs below (eg, <<<10>>>).

   <<<20>>>
   
2. Enter the difficulty level (1: very easy; 5: very difficult) of the project
   between the <<< and >>> signs below (eg, <<<3>>>).

   <<<3>>>

3. Provide a short description of how you approached each problem, issues you 
   encountered, and how you resolved those issues.

   Problem 1 (Using CLEmitter)
      Approach: for this problem  I copied the GenFactorial.java and pasted in my IsPrime.java and used it as a model
      to modify it according to the instructions and pseudocode in the pdf. I also read the book and used Appendix D
      to create addbranch and e.addlabel in the code. I watched Swami's lecture video how we implemented ILOAD, ICONST,
      ISTORE and IF_ICMPGT for if statement when comparing value 1 > value 2. For a lot of these methods I consulted
      AppendixD and Piazza. As a couple of my error were posted on Piazza so I was able to see what I was doing

      Issues and resolution: I got this error main([Ljava/lang/String;)V: Unable to resolve jump label(s). I checked
      Piazza and saw T.A James's advice that  I should check for my labels, which I was missing a lot of them.
      I struggled in understanding if (n % i != 0) to  write in bytecode, but I figured it out by watching the lecture

   Problem 2 (Arithmetic Operations)
      Approach: For problem 2 I followed the instructions on the project pdf. First I defined tokens / and % in
      TokenInfo.java under the operators by putting the DIV with its image (/) and REM with its image (%). Then I
      modified the Scanner.java by returning new token info DIV for '/' and made a case under switch cases for '%' to
      return its new token info REM. I put all the new return token info under the getNextToken() method. So, the
      method would go through all the existing and new tokens. After that I modify the Parser.java, I put the if-else
      cases for DIV and REM to make new lhs for JDivideOp and JRemainderOp respectively inside the
      multiplicativeExpression() according to the grammar for j--. At last implementing the codegen() and analyze()
      JDivideOp, JRemainderOp, and JUnaryPlusOp, and made sure all of them have the type INT.

      Issues and resolution: while compiling I got the error: Literal sought where + found for my UnaryPlus.java. I
      checked the JUnaryPlusOp inside the JUnaryExpression.java. First I had a problem with my Codegen(), as I had
      output.addNoArgInstruction(); But later I realized by checking the grammar and jvm documentation I don't need the
      output.addNoArgInstruction(), as the result would have the same sign even after the unary plus. I fixed that but
      I still had the error. I showed the error to my friend Scott, and he pointed me that the error might be because
      something is wrong with Parser.java. I checked my parser.java, and I was missing to return new JUnaryPlusOp under
      the unaryExpression(). After this fix I resolved my error.


   Problem 3 (Bitwise Operations)
      Approach: For problem 3 I followed the instructions on the project pdf. First I defined tokens ~, |, ^ and & in
      TokenInfo.java under the operators by putting the OR with its image (|), XOR with its image (^), NOT with its
      image (~) and, AND with its image (&). Then I modified the Scanner.java by making a cases under switch cases for
      '~', '^', '|' to return the token info for NOT, XOR, OR respectively. For, '&' I return new TokenInfo AND under
      the case '&'. After that I modify the Parser.java, I created if-else under the andExpression() for AND to make
       lhs for JAndOp. Similarly, created private methods inclusiveOrExpression, exclusiveOrExpression for XOR and OR
       respectively according to the grammar for j--. At last implementing the codegen() and analyze()
      JComplementOp, JInclusiveOrOp, JExclusiveOrOp, and JAndOp inside the JBinaryExpression.java and
      JUnaryExpression.java and made sure all of them have the type INT. Also, for '~' in codegen() I used ICONST and
      INEG to push -1 on the stack with the operand XOR

      Issues and resolution: while  compiling I got the error: Literal sought where ~ found. I found the error was in
      JUnaryExpression.java in my codegen() for '~'. As I was not using the INEG and ICONST_1 in the right way. I
      consulted professor Swami on piazza, and he explained what I am doing wrong in my stack, as I was negating
      operand rather than 1, After professor Swami's guidance, I understood the  error and fixed it.

   Problem 4 (Shift Operations)
      Approach: for this problem I followed the instructions in the pdf and everything  similar to  problem 2 and 3 for
      TokenInfo.java, scanner.java, parser.java  and implementing codegen() and analyze in JBinaryExpression.java and
      JUnaryExpression.java. Although for this problem I have to make nested if statements for '>>' and '>>>' in
      Scanner.java. In parser.java I had to create private method ShiftExpression() for tokens ALSHIFT, ARSHIFT and
      LRSHIFT and also made sure they of type int

      Issues and resolution:  error: After compilation I got these errors: Type boolean doesn't match type int,
      Literal sought where ; found. I was trying to figure where this error is coming from as my codegen() and analyze
      methods were totally fine. I showed the error to my friend Scott, and he told I must  be doing something wrong in
      scanner.java. In scanner.java I found that the error is due to my nested if statements for '>', '>>' and '>>>'.
      The problem with my nested if statements was that I was not doing the nextch() correctly for '>>>'. At I made the
      right logic for the if statements and fixed it. Second, I had minor error for codgen() for JLRightshiftOp in
      output.addNoArgInstruction, but I  fixed by  looking at the jvm documentation.


4. Did you receive help from anyone? List their names, status (classmate, 
   CS451/651 grad, TA, other), and the nature of help received.

   Name               Status       Help Received
   SCOTT              Classmate      problem 2,4 figuring out from which file error is from

   Professor Swami     Instructor         Problem 3 explanation of implementation of codegen() for '~'

5. List any other comments here. Feel free to provide any feedback on how
   much you learned from doing the assignment, and whether you enjoyed
   doing it.

   ...
